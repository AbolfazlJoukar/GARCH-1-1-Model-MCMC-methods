library(MASS)
library(tmvtnorm)
library(truncnorm)
GARCH.MCMC=function(n,T,alfa1,alfa2,beta.11){
y=e=h=numeric(n)
for (k in 2:n){
h[1]=alfa1
y[1]=sqrt(alfa1)*(rnorm(1,0,1))
e[k]=rnorm(1,0,1)
h[k]=alfa1+alfa2*y[k-1]^2+beta.11*h[k-1]
y[k]=sqrt(h[k])*e[k]
}
landa=diag(2*(h^2))
landaa=solve(landa)

q=numeric(2*T)
alpha=matrix(q,nrow=T,ncol=2)
beta=numeric(T) 
alpha.simu0=numeric(T)
alpha.simu1=numeric(T)
log.lik.alpha.simu=numeric(T-1)
log.lik.alpha.tilda=numeric(T-1)
d1=numeric(T-1)
d2=numeric(T-1)
d3=numeric(T-1)
d4=numeric(T-1)
rho1=numeric(T-1)
m=0

beta=numeric(T)
log.lik.beta.simu=numeric(T-1)
log.lik.beta.tilda=numeric(T-1)
beta.simu=numeric(T-1)
d11=numeric(T-1)
d22=numeric(T-1)
d33=numeric(T-1)
d44=numeric(T-1)
rho2=numeric(T-1)
t=0

for (i in 2:T){
alpha[1,]=matrix(c(alfa1,alfa2),nrow=1,ncol=2)
beta[1]=beta.11

#-------------------------------------------------------------------------------------------------------------------------------------
H1=LS1=VS1=V=numeric(n)
for (j in 2:n){
H1[1]=alpha[i-1,1]
LS1[1]=1
VS1[1]=0
LS1[j]=1+beta[i-1]*LS1[j-1]
VS1[j]=V[j-1]+beta[i-1]*VS1[j-1]
V[1]=(y[1]^2)
V[j]=y[j]^2
H1[j]=alpha[i-1,1]+alpha[i-1,2]*y[j-1]^2+beta[i-1]*H1[j-1]
}
C1=rbind(LS1,VS1)
C2=t(C1)
sigma.a=diag(c(100,100))
landa1=diag(2*(H1^2))
landa2=(solve(landa1))
mu=matrix(c(0,0),nrow=2,ncol=1)
VV=matrix(V,nrow=n,ncol=1)
sigma.tilda=solve(C1%*%landa2%*%C2+solve(sigma.a))
mu.tilda=(sigma.tilda)%*%(C1%*%landa2%*%VV)
mu.tilda1=t(mu.tilda)
mu.tilda2=c(mu.tilda1[,1],mu.tilda1[,2])
alpha.simu=rtmvnorm(1,mean=c(mu.tilda2[1],mu.tilda2[2]),sigma=sigma.tilda, lower=c(0,0), upper=c(Inf,Inf),algorithm="gibbs", burn.in.samples=100,thinning = 5)
alpha.simu0[i]=alpha.simu[1]
alpha.simu1[i]=alpha.simu[2]
alphamat=matrix(c(alpha.simu0[i],alpha.simu1[i]),nrow=2,ncol=1)
alphamat1=matrix(c(alpha[i-1,1],alpha[i-1,2]),nrow=2,ncol=1)
#----------------------------------------------------------------------------------------------------------------------------------------------------------
H2=numeric(n)
for (j in 2:n){
H2[1]=alpha.simu0[i]
H2[j]=alpha.simu0[i]+alpha.simu1[i]*y[j-1]^2+beta[i-1]*H2[j-1]
}
landa3=diag(2*(H2^2))
landa4=(solve(landa3))
sigma.star=solve(C1%*%landa4%*% C2+solve(sigma.a))
mu.star=(sigma.star)%*%(C1%*%landa4%*%VV)
mu.star1=t(mu.star)
mu.star2=c(mu.star1[,1],mu.star1[,2])
#-------------------------------------------------------------------------------------------------------------------------

log.lik.alpha.tilda[i]=(-1/2)*log(det(landa1))-((1/2)*t(VV-C2%*%alphamat1)%*%landa2%*%(VV-C2%*%alphamat1))
log.lik.alpha.simu[i]=(-1/2)*log(det(landa1))-((1/2)*t(VV-C2%*%alphamat)%*%landa2%*%(VV-C2%*%alphamat))


d1[i]=log.lik.alpha.simu[i]+((-1/(2*100))*(alpha.simu0[i]^2+alpha.simu1[i]^2))
d2[i]=log.lik.alpha.tilda[i]+((-1/(2*100))*(alpha[i-1,1]^2+alpha[i-1,2]^2))
d3[i]=-0.5*log(det(sigma.star))+(-.5*t(alphamat1-mu.star)%*%solve(sigma.star)%*%(alphamat1-mu.star))
d4[i]=-0.5*log(det(sigma.tilda))+(-.5*t(alphamat-mu.tilda)%*%solve(sigma.tilda)%*%(alphamat-mu.tilda))

rho1[i]=exp((d1[i]+d3[i])-(d2[i]+d4[i]))
if(runif(1)<(rho1[i])){ 
alpha[i,]=alpha.simu[1,]
m=m+1
}else{ 
alpha[i,]=alpha[(i-1),] 
}

#--------------------------------------------------------------------------------------------------------------------------

H3=Z3=D3=R3=V=numeric(n)
for (j in 2:n){
H3[1]=alpha[i,1]
H3[j]=alpha[i,1]+alpha[i,2]*y[j-1]^2+beta[i-1]*H3[j-1]
V[1]=(y[1]^2)
V[j]=y[j]^2
Z3[1]=(y[1]^2)-alpha[i,1]
Z3[j]=(y[j]^2)-alpha[i,1]-(alpha[i,2]+beta[i-1])*(y[j-1]^2)+beta[i-1]*Z3[j-1]

D3[1]=0
D3[j]=(y[j-1]^2)-Z3[j-1]+beta[i-1]*D3[j-1]

R3[1]=(y[1]^2)-alpha[i,1]
R3[j]=Z3[j]+beta[i-1]*D3[j]
}
landa5=diag(2*(H3^2))
landa6=(solve(landa5))

RR=matrix(R3,nrow=n,ncol=1)
DD=matrix(D3,nrow=n,ncol=1)
DDD=t(DD)
sigma.tilda2=1/(DDD%*%landa6%*%DD+((1/100)))
mu.tilda2=(sigma.tilda2)*(DDD%*%landa6%*% RR)
beta.simu[i]=rtruncnorm(n=1,a=0,b=Inf,mean=mu.tilda2,sd=sqrt(sigma.tilda2))
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
H4=Z4=D4=R4=numeric(n)
for (j in 2:n){
H4[1]=alpha[i,1]
H4[j]=alpha[i,1]+alpha[i,2]*y[j-1]^2+beta.simu[i]*H4[j-1]

Z4[1]=(y[1]^2)-alpha[i,1]
Z4[j]=(y[j]^2)-alpha[i,1]-(alpha[i,2]+beta.simu[i])*(y[j-1]^2)+beta.simu[i]*Z4[j-1]

D4[1]=0
D4[j]=(y[j-1]^2)-Z4[j-1]+beta.simu[i]*D4[j-1]

R4[1]=(y[1]^2)-alpha[i,1]
R4[j]=Z4[j]+beta.simu[i]*D4[j]

}
landa7=diag(2*(H4^2))
landa8=(solve(landa7))

RRR=matrix(R4,nrow=n,ncol=1)
DDD1=matrix(D4,nrow=n,ncol=1)
DDDD=t(DDD1)
sigma.star2=1/(DDDD%*%landa8%*%DDD1+(1/100))
mu.star2=(sigma.star2)*(DDDD%*%landa8%*% RRR)

log.lik.beta.simu[i]=(-1/2)*log(det(landa5))-((1/2)*t(RR-beta.simu[i]*DD)%*%landa6%*%(RR-beta.simu[i]*DD))
log.lik.beta.tilda[i]=(-1/2)*log(det(landa5))-((1/2)*t(RR-beta[i-1]*DD)%*%landa6%*%(RR-beta[i-1]*DD))
d11[i]=log.lik.beta.simu[i]+((-1/(2*100))*(beta.simu[i]^2))
d22[i]=log.lik.beta.tilda[i]+((-1/(2*100))*(beta[i-1]^2))
d33[i]=-0.5*log(det(sigma.star2))+(-.5*t(beta[i-1]-mu.star2)%*%solve(sigma.star2)%*%(beta[i-1]- mu.star2))
d44[i]=-0.5*log(det(sigma.tilda2))+(-.5*t(beta.simu[i]-mu.tilda2)%*%solve(sigma.tilda2)%*%(beta.simu[i]- mu.tilda2))

rho2[i]=exp((d11[i]+d33[i])-(d22[i]+d44[i]))
if(runif(1)<(rho2[i])){ 
beta[i]=beta.simu[i]
t=t+1
}else{ 
beta[i]=beta[i-1]
}
}
par(mfrow=c(2,3))
N=seq(1,T,1)
plot(N,alpha[,1],type="l",col="blue",xlab="T",ylab=expression(alpha[1]))
abline(mean(alpha[,1]),0,col="Black",lty=1)

plot(N,alpha[,2],type="l",col="blue",xlab="T",ylab=expression(alpha[2]))
abline(mean(alpha[,2]),0,col="Black",lty=1)

plot(N,beta,type="l",col="blue",xlab="T",ylab=expression(beta))
abline(mean(beta),0,col="Black",lty=1)

hist(alpha[,1],col="blue",xlab="",ylab="",main=expression(alpha[1]))
hist(alpha[,2],col="blue",xlab="",ylab="",main=expression(alpha[2]))
hist(beta,col="blue",xlab="",ylab="",main=expression(beta))
return(list('alpha1.had'=mean(alpha[,1]),'alpha2.had'=mean(alpha[,2]),'rate.alpha'=m/T,'beta.had'=mean(beta),'rate.beta'=t/T))

}
GARCH.MCMC(100,5000,.08,.2,.7)

